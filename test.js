
// const wait = sec => new Promise(resolve => setTimeout(() => resolve("OK"), sec * 1000))

// const map = (array, func) => {
//    let i = 0, newArray = []
//    for (let element of array) { newArray = [...newArray, func(element, i)]; i++ }
//    return newArray
// }

// const profile = {
//    async fullname() { },
//    fullname2: async () => { }
// }
// async function getContacts2() {

//    try {

//       let ids = [1, 2, 3]

//       // await Promise.all(() => {
//       //    ids.forEach(id => {
//       //       let res = await wait(id)
//       //       console.log(res)
//       //    })
//       // })

//       for (let sec of ids) {

//          let res = await wait(sec)
//          console.log(res)

//       }

//       // let res = await wait(2) // Profile list
//       // console.log(res)

//       // let res2 = await wait(1)
//       // console.log(res2)

//       // let res2 = await wait(1)
//       // console.log(res2)

//    }
//    catch (error) {
//       console.log(error)
//    }

//    // wait(3).then(res2 => {
//    //    console.log(res2)
//    // }).catch(err => {

//    // })

//    // wait(2).then(res => {
//    //    console.log(res)
//    //    wait(3).then(res2 => {
//    //       console.log(res2)
//    //       wait(3).then(res2 => {
//    //          console.log(res2)
//    //          wait(3).then(res2 => {
//    //             console.log(res2)
//    //          })
//    //             .catch(err => {

//    //             })
//    //       })
//    //          .catch(err => {

//    //          })
//    //    })
//    //       .catch(err => {

//    //       })
//    // }).catch(err => {

//    // })
// }
// //getContacts2()
// const getContacts = async () => {

// }

// // const print = message => {
// //    console.log(message)
// // }
// // const printOnlyName = name => {
// //    console.log(name)
// // }

// // const grettings = (print2, name) => {
// //    print2("Good morning Mr. " + name)
// // }

// // grettings(print, "Asif")
// // grettings(print, "Asif")


// class CArray {
//    constructor(arr) {
//       this.array = arr
//    }
//    map(callback) {
//       let i = 0, newArray = []
//       for (let element of this.array) { newArray = [...newArray, callback(element, i)]; i++ }
//       return newArray
//    }
// }

// let ages = [20, 22, 23]
// let ages2 = new CArray([20, 22, 23])

// let mappedArray = map(ages, el => el * 2)
// let mappedArray2 = ages.map(el => el * 2)
// let mappedArray3 = ages2.map(el => el * 2)


// console.log(mappedArray)
// console.log(mappedArray2)
// console.log(mappedArray3)


let a = "💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤💞♥💛💚💙💜💔💕💞💓💗💖💘💝💟❤"

console.log("------------------\nCOUNTER => ", a.split("").length)
console.log("------------------")